{"name":"jQuery.RSS","body":"## jquery.rss\r\n\r\nThis plugin can be used to read a RSS feed (via the Google Feed API) and transform it into a custom piece of HTML.\r\n\r\n## Setup\r\n\r\n    <!DOCTYPE html>\r\n    <html>\r\n      <head>\r\n        <title>jquery.rss example</title>\r\n        <script src=\"lib/jquery-1.6.4.min.js\"></script>\r\n        <script src=\"src/jquery.rss.js\"></script>\r\n        <script>\r\n          jQuery(function($) {\r\n            $(\"#rss-feeds\").rss(\"http://feeds.feedburner.com/premiumpixels\")\r\n          })\r\n        </script>\r\n      </head>\r\n      <body>\r\n        <div id=\"rss-feeds\"></div>\r\n      </body>\r\n    </html>\r\n\r\n## Options\r\n\r\n    $(\"#rss-feeds\").rss(\r\n      \"http://feeds.feedburner.com/premiumpixels\",\r\n      {\r\n        // how many entries do you want?\r\n        // default: 4\r\n        limit: 10,\r\n\r\n        // will request the API via https\r\n        // default: false\r\n        ssl: true,\r\n\r\n        // outer template for the html transformation\r\n        // default: \"<ul>{entries}</ul>\"\r\n        layoutTemplate: '<div class='feed-container'>{entries}</div>',\r\n\r\n        // inner template for each entry\r\n        // default: '<li><a href=\"{url}\">[{author}@{date}] {title}</a><br/>{shortBodyPlain}</li>'\r\n        entryTemplate: '<p>{title}</p>',\r\n\r\n        // additional token definition for in-template-usage\r\n        // default: {}\r\n        tokens: {\r\n          foo: 'bar',\r\n          bar: function(entry, tokens) { return entry.title }\r\n        },\r\n\r\n        // output mode of google feed loader request\r\n        // default: 'json'\r\n        outputMode: 'json_xml'\r\n      },\r\n\r\n      // User callback function called after feeds are successfully loaded.\r\n      function callback() {}\r\n    )\r\n\r\n## Templating\r\n\r\nAs seen in the options, you can specify a template in order to transform the json objects into HTML.\r\nThe basic format of that template is:\r\n\r\n    \"<outer-html>{entry}<entry-html></entry-html>{/entry}</outer-html>\"\r\n\r\nUsing such a format, you can specify the structure of the entry-wise HTML, as well as the surrounding one.\r\nIf you specify a template, which has no \"entry\"-tokens, the templates gets treated as entry-wise template without\r\nsurrounding stuff.\r\n\r\nSo, let's say you have specified a limit of 2. Using the upper pseudo html. This will result in the following:\r\n\r\n    <outer-html>\r\n      <entry-html></entry-html>\r\n      <entry-html></entry-html>\r\n    </outer-html>\r\n\r\nIn order to get values for each entry, you can do something like this:\r\n\r\n    \"<div class='rss-feeds'><ul>{entry}<li>{title}</li>{/entry}</ul></div>\"\r\n\r\nThe {title} token will get replaced by the actual title. So you will get this:\r\n\r\n  <div class=\"rss-feeds\">\r\n    <ul>\r\n      <li>Title 1</li>\r\n      <li>Title 2</li>\r\n    </ul>\r\n  </div>\r\n\r\nThere are some predefined tokens:\r\n\r\n- url: the url to the post\r\n- author: the author of the post\r\n- date: the publishing date\r\n- title: the title of the post\r\n- body: the complete content of the post\r\n- shortBody: the shortened content of the post\r\n- bodyPlain: the complete content of the post without html\r\n- shortBodyPlain: the shortened content of the post without html\r\n- teaserImage: the first image in the post's body\r\n- teaserImageUrl: the url of the first image in the post's body\r\n- index: the index of the current entry\r\n- totalEntries: the total count of the entries\r\n\r\nYou can also define custom tokens using the ```tokens``` option:\r\n\r\n    $('#foo').rss(url, {\r\n      template: \"{dynamic}, {static}, {re-use}\",\r\n      tokens: {\r\n        dynamic: function(entry, tokens){ return \"dynamic-stuff: \" + entry.title },\r\n        \"re-use\": function(entry, tokens){ return encodeURIComponent(tokens.teaserImageUrl) },\r\n        static: \"static\"\r\n      }\r\n    })\r\n\r\nPlease make sure to NOT define infinite loops. The following example is really BAD:\r\n\r\n    $('#foo').rss(url, {\r\n      template: \"{loop}\",\r\n      tokens: {\r\n        whoops: function(entry, tokens) { return tokens.loop() }\r\n        loop: function(entry, tokens) { return tokens.whoops() }\r\n      }\r\n    })\r\n\r\n## Filtering\r\n\r\nThe plugin also allows you to filter specific entries in order to only print them:\r\n\r\n    $(\"#foo\").rss(url, {\r\n      limit: 100,\r\n      filterLimit: 10,\r\n      filter: function(entry, tokens) {\r\n        return tokens.title.indexOf('my filter') > -1\r\n      }\r\n    })\r\n\r\nThis will request 100 entries via the Feed API and renders the first 10 matching entries.\r\n\r\n## Testing\r\n\r\nThe test suite uses Mocha in the browser. Furthermore we are running the test suite with PhantomJS.\r\nIn order to run the tests, you need to have the phantomjs binary (http://code.google.com/p/phantomjs/downloads/list)\r\nin the PATH and run `npm test` in the root folder.\r\n\r\n## Minified version\r\n\r\nThe source is minified via [http://jscompress.com].\r\n\r\n## Authors/Contributors\r\n\r\n- DaWanda GmbH ([Website](http://dawanda.com))\r\n- Sascha Depold ([Twitter](http://twitter.com/sdepold) | [Github](http://github.com/sdepold) | [Website](http://depold.com))\r\n- Steffen Schr√∂der  ([Twitter](http://twitter.com/ChaosSteffen) | [Github](http://github.com/ChaosSteffen) | [Website](http://schroeder-blog.de))\r\n","tagline":"An easy-to-use rss plugin for jquery with templating.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}